---
title: Introduction to the Jenkins XL Deploy plugin
categories:
- xl-deploy
subject:
- Jenkins
tags:
- jenkins
- package
- deployment
---

The XL Deploy plugin for [Jenkins CI](/xl-deploy/how-to/create-a-deployment-package-using-jenkins.html) adds three post-build actions that you can use independently or together:

* Package an application
* Publish a deployment package to XL Deploy
* Deploy an application

For more information about using the plugin, refer to:

* [Create a deployment package using Jenkins](/xl-deploy/how-to/create-a-deployment-package-using-jenkins.html)
* [The XL Deploy plugin on the Jenkins wiki](https://wiki.jenkins-ci.org/display/JENKINS/XL+Deploy+Plugin)

## Features

* Deploy package (DAR) packaging:
    * With artifacts created by the Jenkins job
    * With other artifacts or resources
* Publish DAR packages to XL Deploy
* Trigger deployments in XL Deploy
* Auto-scale deployments to modified environments
* Execute on Microsoft Windows or Unix slave nodes

## Configuration

  There are 2 places to configure the XL Deploy Jenkins Plugin: the global Jenkins configuration and job configuration.

* Plugin configuration
  At _Manage Jenkins \-> Configure System_ you can specify the XL Deploy server URL and one or more sets of credentials. Different credentials can be used for different jobs.

* Job configuration
  In the Job Configuration page, choose _Post-build Actions \-> Add post-build action \-> Deploy with_ XL Deploy. Now you can configure which actions to perform and other settings. To get an explanation of each setting, click on the question mark sign located right next to each setting.

## Using the plugin

* Generate version of my application automatically?
If you practice continuous delivery, it may be useful to increase the version automatically after each build. For this you can use one of Jenkins environment variables in the _Version_ field, e.g. {{$BUILD_NUMBER}}. To see the complete list of available variables, see [JENKINS:Building a software project].

* Optimize the plugin for parallel running deployment jobs
If you have many deployment jobs running in parallel you can tweak the connection settings by increasing the connection pool size on the Global configuration screen. The default connection pool size is 10.

* Escape '&' and '=' characters in a property of type map_string_string
A '&' and '='can be escaped with sequence '\&' and '\=' respectively, for example string a=1&b=2&c=abc=xyz&d=a&b can be replaced with a=1&b=2&c=abc\=xyz&d=a\&b.

## **Using Jenkinsfile**

* In XL Deploy 6.1.0 and later, you can use the Jenkins Pipeline feature with the XL Deploy plugin for Jenkins. This feature allows you to create a "pipeline as code" in a Jenkinsfile, using the Pipeline DSL. You can then store the Jenkinsfile in a source control repository.

* Example:
 The following Jenkinsfile can be used to build the pipeline and deploy a simple web-application to a tomcat environment configured in xl-deploy.

 node {  
 stage('Checkout') {  
    git url: 'https://github.com/xebialabs/rest-o-rant-api.git'  
 }  
 stage('Build') {  
    if (isUnix()) {  
        sh "./gradlew clean build"  
    } else {  
       bat("gradlew.bat clean build")  
    }  
  }  
  stage('Package') {  
    xldCreatePackage artifactsPath: 'build/libs', manifestPath: 'deployit-manifest.xml', darPath: '$JOB_NAME-$BUILD_NUMBER.0.dar'  
  }  
  stage('Publish') {  
    xldPublishPackage serverCredentials: 'Admin', darPath: '$JOB_NAME-$BUILD_NUMBER.0.dar'  
  }  
  stage('Deploy') {  
    xldDeploy serverCredentials: 'Admin', environmentId: 'Environments/Dev', packageId: 'Applications/rest-o-rant-api/$BUILD_NUMBER.0'  
  }  
}  

## **Configuration:**
  In jenkins add the above Jenkinsfile file content to the pipeline script in jenkins and make sure that the xlDeploy plugin is added to the
  jenkins setup.

## **Package your application:**
  Creates a XL Deploy deployment (DAR) package. The deployment package will usually contain one or more artifact(s) created by Jenkins build.

## **Import a package**
  You can choose which package to import into XL Deploy. This can be a DAR package generated by the *Package your application* action, or a package from an external location (filesystem or URL).

## **Deploy your application**
  Deploys a specific version of the application to the specified environment.
